SSH CONFIGURATION

- SSH is one of the most important configurations in Linux to secure.
  - A unproperly configured SSH server can allow attackers to plant backdoors or gain remote shells into your server.
- To check whether or not your machine has OpenSSH installed, you can type the following into most Linux distro command lines.

  - # apt search openssh-client
 
 - The machine will tell you whether or not it is installed, and if it isn't, perform the following
  
  - # apt-get update
  - # apt update
  - # apt-get install openssh-server

- The SSH configuration file is normally under ~/.ssh or /etc/ssh. An example of the file format is as follows.

# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# This sshd was compiled with
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

Include /etc/ssh/sshd_config.d/*.conf

#Port 22
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

#HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
#HostKey /etc/ssh/ssh_host_ed25519_key

# Ciphers and keying
#RekeyLimit default none

# Logging
#SyslogFacility AUTH
#LogLevel INFO

# Authentication:

#LoginGraceTime 2m
#PermitRootLogin yes
#StrictModes yes
#MaxAuthTries 6
#MaxSessions 10

PubkeyAuthentication yes

# Expect .ssh/authorized_keys2 to be disregarded by default in future.
#AuthorizedKeysFile    .ssh/authorized_keys .ssh/authorized_keys2

#AuthorizedPrincipalsFile none

#AuthorizedKeysCommand none
#AuthorizedKeysCommandUser nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
HostbasedAuthentication yes
# Change to yes if you don't trust ~/.ssh/known_hosts for
HostbasedAuthentication yes
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
#IgnoreRhosts yes

# To disable tunneled clear text passwords, change to no here!
PasswordAuthentication yes
PermitEmptyPasswords no

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
#KbdInteractiveAuthentication no

# Kerberos options
#KerberosAuthentication no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes
#KerberosGetAFSToken no

# GSSAPI options
GSSAPIAuthentication no
GSSAPICleanupCredentials yes
#GSSAPIStrictAcceptorCheck yes
#GSSAPIKeyExchange no

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the KbdInteractiveAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via KbdInteractiveAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and KbdInteractiveAuthentication to 'no'.
UsePAM yes

#AllowAgentForwarding yes
#AllowTcpForwarding yes
#GatewayPorts no
X11Forwarding yes
#X11DisplayOffset 10
#X11UseLocalhost yes
#PermitTTY yes
PrintMotd no
#PrintLastLog yes
#TCPKeepAlive yes
#PermitUserEnvironment no
#Compression delayed
#ClientAliveInterval 0
#ClientAliveCountMax 3
#UseDNS no
#PidFile /run/sshd.pid
#MaxStartups 10:30:100
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

# no default banner path
#Banner none

- There are many different options to add to the user account. The options are relatively simple, however troubleshooting these issues are easy as well.

- Disabling root login is the NUMBER ONE STEP to start securing your linux server
  - Root login should not be allowed and only accessible from the physical machine itself.

- For CCDC, having a way to log-in via the public authentication is generally the method to receiving checks for the flags.
  - This information will be confirmed soon.
 
- ENSURE that #passwordauthentication is checked.
- Do not allow an infinite number of attempts to log into the ssh server.
  - This will make your ssh server subject to brute force attempts.

SUDOERS CHECK

- If any of the red team/attackers gain access to an SSH shell, there are still opportunities to ensure that they cannot interfere with the machine.
  - Ensure that sudoers is locked behind sudo, and should be only accessible as the root user.
  - The ONLY way to gain access to a root-level shell should be with the command:
    - # su
  - This will require the root password, which should already be configured to be extremely difficult to crack.
  
